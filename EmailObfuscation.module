<?php
/**
 * Email Obfuscation (EMO)
 *
 * Email Obfuscation module for plaintext emails and email links with 64 base crypting.
 *
 * https://github.com/BlowbackDesign/emo
 * Copyright (C) 2013 Blowback http://www.blowback.fi
 * GNU/GPL license http://www.gnu.org/copyleft/gpl.html
 *
 * This is ProcessWire module fork from MODX Evolution plugin emo E-Mail Obfuscation.
 * http://modx.com/extras/package/emoemailobfuscation
 *
 */

class EmailObfuscation extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Email Obfuscation (EMO)',
			'version' => 111,
			'summary' => 'Email Obfuscation module for plaintext emails and email links with 64 base crypting.',
			'href' => 'https://github.com/BlowbackDesign/emo',
			'singular' => true,
			'autoload' => true,
		);
	}

	/**
	 * constants for mode
	 *
	 */
	const modeManual = 0;
	const modeInclude = 1;
	const modeExclude = 2;

	/**
	 * constants for js file loading method
	 *
	 */
	const loadManual = 0;
	const loadScripts = 1;
	const loadAuto = 2;

	/**
	 * default configuration options
	 *
	 */
	private $options = array(
		'noscript' => 'Enable JavaScript to view protected content.',
		'jsFile' => 'emo.min.js',
		'jsLoad' => self::loadAuto,
		'mode' => self::modeExclude,
		'mailto' => true,
		'debug' => false,
		'selectedTemplates' => array(),
		'selectedPages' => array(),
	);

	/**
	 * array for encoded links
	 *
	 */
	private $links = array();

	/**
	 * address counter
	 *
	 */
	private $addrCount = 0;

	/**
	 * address string for javascript
	 *
	 */
	private $addrScript = '';

	/**
	 * base 64 characters
	 *
	 */
	private $tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+.';

	/**
	 * debug time and data
	 *
	 */
	private $debugTime = 0;
	private $debugData = '';

	/**
	 * bool value for obfuscated output
	 *
	 */
	private $obfuscated = false;

	/**
	 * constructor
	 *
	 */
	public function __construct() {

		// set default config variables
		foreach($this->options as $key => $value) {
			$this->$key = $value;
		}

		// add path to js file url
		$url = $this->config->urls->EmailObfuscation;
		if(strpos($this->jsFile, $url) === false) {
			$this->jsFile = $url . $this->jsFile;
		}

	}

	/**
	 * initialize the module
	 *
	 */
	public function init() {

		// add emo.js to scripts array if set
		if($this->jsLoad == self::loadScripts) {
			$this->config->scripts->add($this->jsFile);
		}

		// add new emo method to the sanitizer for manual obfuscation
		$this->addHook('Sanitizer::emo', $this, 'emo');

		// hook render method after page render to modify output
		$this->addHookAfter('TemplateFile::render', $this, 'render');
	}

	/**
	 * return microtime for debug timer
	 *
	 */
	private static function timer() {
		$time = explode(' ', microtime());
		return $time[1] + $time[0];
	}

	/**
	 * return regex pattern that matches email addresses
	 *
	 */
	private static function pattern() {
		$atom = "[-!#$%'*+=?^_`{|}~0-9A-Za-zÀ-ž]+";
		$name = $atom.'(?:\\.'.$atom.')*';
		$domain = $atom.'(?:\\.'.$atom.')+';
		return "<({$name}@{$domain})>";
	}

	/**
	 * custom base 64 encoding
	 *
	 */
	private function base64($data) {
		$out = '';
		for($i = 0; $i < strlen($data); ) {
			$c1 = ord($data{$i++});
			$c2 = $c3 = NULL;
			if($i < strlen($data)) $c2 = ord($data{$i++});
			if($i < strlen($data)) $c3 = ord($data{$i++});
			$e1 = $c1 >> 2;
			$e2 = (($c1 & 3) << 4) + ($c2 >> 4);
			$e3 = (($c2 & 15) << 2) + ($c3 >> 6);
			$e4 = $c3 & 63;
			if(is_nan($c2)) $e3 = $e4 = 64;
			else if(is_nan($c3)) $e4 = 64;
			$out .= $this->tab{$e1} . $this->tab{$e2} . $this->tab{$e3} . $this->tab{$e4};
		}
		return $out;
	}

	/**
	 * encrypt the match
	 *
	 */
	private function encode($matches) {

		// filter out images detected as false positives (@2x file names)
		if(preg_match('/\.(jpe?g|png|gif|bmp)$/i', $matches[0])) return $matches[0];

		// set lang id for translated noscript text
		$lang = $this->wire('languages') ? $this->user->language->isDefault() ? '' : "__{$this->user->language->id}" : '';

		// counter and key array
		if(!$this->addrCount) {
			mt_srand((double) microtime() * 1000000); // random generator seed
			$this->tab = str_shuffle($this->tab); // make base 64 key
			$this->addrCount = 1;
			$this->addrScript = " emo_addr[0] = \"{$this->tab}\";\n";
		}

		// normalize matches
		if(isset($matches[2])) {
			$matches[1] = $matches[1] . '@' . $matches[2];
			$matches[2] = $matches[3];
			unset($matches[3]);
		} else {
			$matches[2] = $matches[1];
		}

		// plain text link by default
		$link = $matches[1];

		// create html of the link
		if($this->mailto || $matches[0] != $matches[1]) {
			if(strpos($matches[0], 'class=') !== false) $link = preg_replace('/( class=[\'"])/', '$1' . "emo_email ", $matches[0]);
			else if(strpos($matches[0], '<a') !== false) $link = str_replace('<a', '<a class="emo_email"', $matches[0]);
			else $link = '<a class="emo_email" href="mailto:' . $matches[1] . '">' . $matches[2] . '</a>';
		}

		// create html of the fake link
		$fakeLink = '<span id="emo_email_' . $this->addrCount . '" class="emo_email">';
		$fakeLink .= preg_match(self::pattern(), $matches[2]) ? $this->{"noscript$lang"} : $matches[2];
		$fakeLink .= '</span>';

		// did we use the same link before?
		$key = array_search($link, $this->links);
		$crypted = ($key === false) ? '"' . $this->base64($link) . '"' : 'emo_addr[' . ($key + 1) . ']';

		// add encrypted address to js array script string
		$this->addrScript .= " emo_addr[{$this->addrCount}] = {$crypted};\n";

		// create email debug data
		if($this->debug) {
			for($i = 0; $i < count($matches); ++$i) $this->debugData .= " {$this->addrCount}[$i] = {$matches[$i]}\n";
			$this->debugData .= "\n Hash: {$crypted}\n Data: {$link}\n\n";
		}

		// add link to recent links array
		array_push($this->links, $link);

		// increase address counter
		++$this->addrCount;

		return $fakeLink;
	}

	/**
	 * obfuscate email addresses at given (html) string
	 *
	 */
	private function obfuscate($html) {

		if($this->debug) $time = self::timer();

		$tags = "#((?:<head).*(?:<\/head>))|((?:<form).*(?:<\/form>))|((?:<script).*(?:<\/script>))#isUu";
		$mailto = "#<a[^>]*mailto:([^'\"@]+)@([^'\"]+)['\"][^>]*>(.*)<\/a>#isUu";
		$output = "";

		// split html to parts by head and form tags
		foreach(preg_split($tags, $html, NULL, PREG_SPLIT_DELIM_CAPTURE) as $str) {

			// encode mailto links and email addresses from the parts
			if(!in_array(substr($str, 0, 5), array('<head', '<form', '<scri'))) {
				$str = preg_replace_callback($mailto, array($this, 'encode'), $str);
				$str = preg_replace_callback(self::pattern(), array($this, 'encode'), $str);
			}

			// glue parts back to output
			$output .= $str;
		}

		if($this->debug) $this->debugTime += (self::timer() - $time);

		return $output;
	}

	/**
	 * modify output at page render
	 *
	 */
	public function render($event) {

		if($this->obfuscated) return;
		if($this->debug) $time = self::timer();

		$templateFile = $event->object;
		$options = $templateFile->options;

		// checking for $options, which we know is given to page renders
		// this is to make sure it's not some other use of TemplateFile
		if(is_array($options) && array_key_exists('pageStack', $options)) {

			$output = $event->return;
			$page = $templateFile->page;

			// keep output untouched at admin pages
			if($page->template->flags & Template::flagSystem) return;

			// touch output only at complete html document
			if(strpos($output, '</html>') === false) return;

			// exit in manual mode when there's no addresses to obfuscate
			if($this->mode == self::modeManual && !$this->addrCount) return;

			// exit in include mode when page is not in selected templates/pages
			if($this->mode == self::modeInclude && !$this->addrCount) {
				if(!in_array($page->template->id, $this->selectedTemplates)
				&& !in_array($page->id, $this->selectedPages)) return;
			}

			// exit in exclude mode when page is in selected templates/pages
			if($this->mode == self::modeExclude && !$this->addrCount) {
				if(in_array($page->template->id, $this->selectedTemplates)
				|| in_array($page->id, $this->selectedPages)) return;
			}

			// auto obfuscate output
			if($this->mode != self::modeManual && !$this->addrCount) {
				$output = $this->obfuscate($output);
			}

			// create addresses script block
			$addrScript = "\n<!-- emo -->\n<script>\n var emo_addr = new Array();\n{$this->addrScript}</script>\n";

			// append emo.js to addresses if set
			if($this->jsLoad == self::loadAuto && strpos($output, $this->jsFile) === false) {
				$addrScript .= "<script src='{$this->jsFile}' async defer></script>\n";
			}

			// append addresses block to html body
			if($this->addrCount && strpos($output, $addrScript) === false) {
				$output = str_replace("</body>", "{$addrScript}\n</body>", $output);
			}

			// append debug info to output
			if($this->debug) {
				$this->debugTime += (self::timer() - $time);
				$output .= "\n<!-- \n\n EMO DEBUG DATA\n\n";
				$output .= " Email crypting took {$this->debugTime} seconds\n";
				$output .= "\n Found " . count($this->links) . " matches:\n\n{$this->debugData}-->";
			}

			// return modified output
			if($event->return = $output) $this->obfuscated = true;
		}
	}

	/**
	 * public sanitizer method for manual obfuscation
	 *
	 */
	public function emo($event) {
		if(count($event->arguments)) {
			$str = $event->arguments(0);
			$event->return = $this->obfuscate($str);
		}
	}

	/**
	 * configure admin fields
	 *
	 */
	public function getConfig() {
		$inputfields = new InputfieldWrapper();

		$f = $this->modules->get('InputfieldText');
		$f->label = 'Replace text string';
		$f->attr('name', 'noscript');
		$f->attr('value', $this->noscript);
		$f->useLanguages = true;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldRadios');
		$f->label = 'Obfuscation mode';
		$f->attr('name', 'mode');
		$f->attr('value', $this->mode);
		$f->addOption(self::modeManual, 'Obfuscate manually by `$sanitizer->emo()`');
		$f->addOption(self::modeInclude, 'Automatically, only at selected templates/pages');
		$f->addOption(self::modeExclude, 'Automatically, exclude at selected templates/pages');
		$f->columnWidth = 50;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldRadios');
		$f->label = 'JavaScript loading method';
		$f->attr('name', 'jsLoad');
		$f->attr('value', $this->jsLoad);
		$f->addOption(self::loadManual, 'Load file manually');
		$f->addOption(self::loadScripts, 'Load file to `$config->scripts` array');
		$f->addOption(self::loadAuto, 'Append file to page automatically');
		$f->columnWidth = 50;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->label = 'Force mailto';
		$f->description = 'Makes all email addresses rendered as mailto links when enabled.';
		$f->attr('name', 'mailto');
		if($this->mailto) $f->attr('checked', 'checked');
		$f->columnWidth = 50;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->label = 'Debug';
		$f->description = 'Prepends debug info to html output when enabled.';
		$f->attr('name', 'debug');
		if($this->debug) $f->attr('checked', 'checked');
		$f->columnWidth = 50;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldAsmSelect');
		$f->label = 'Selected Templates';
		$f->attr('name', 'selectedTemplates');
		$f->attr('value', $this->selectedTemplates);
		foreach($this->templates as $t) {
			if(!($t->flags & Template::flagSystem)) {
				$f->addOption($t->id, $t->name);
			}
		}
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldPageAutocomplete');
		$f->label = 'Selected Pages';
		$f->attr('name', 'selectedPages');
		$f->attr('value', $this->selectedPages);
		$selector = '';
		foreach($this->templates as $t) {
			if(!($t->flags & Template::flagSystem)) {
				if(!in_array($t->id, $this->selectedTemplates)) $selector .= "|{$t->name}";
			}
		}
		$f->findPagesSelector = "template=" . ltrim($selector, '|');
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f);

		return $inputfields;
	}

	public static function getModuleConfigInputfields(array $data) {
		$module = wire('modules')->get('EmailObfuscation');
		return $module->getConfig();
	}

}
